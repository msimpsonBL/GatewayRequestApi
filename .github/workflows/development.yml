name: Build and Publish Docker Image to Docker Hub and Trigger Azure Release

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up .NET environment
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # Step 3: Authenticate with Azure Artifacts
      - name: Authenticate with Azure Artifacts
        run: |
          echo ${{ secrets.AZURE_DEVOPS_PAT }} | dotnet nuget add source --store-password-in-clear-text \
          --name azure-artifacts https://pkgs.dev.azure.com/BritishLibrary-AppDev/Gateway/_packaging/Gateway_Nuget_Feed/nuget/v3/index.json \
          --username GitHubActions --password ${{ secrets.AZURE_DEVOPS_PAT }}

      # Step 4: Restore dependencies
      - name: Restore dependencies for Unit Tests
        run: dotnet restore GatwayRequestApi.UnitTests/GatwayRequestApi.UnitTests.csproj

      # Step 5: Run Unit Tests
      - name: Run Unit Tests
        run: dotnet test GatwayRequestApi.UnitTests/GatwayRequestApi.UnitTests.csproj --verbosity normal

      # Step 6: Restore Dependencies for Functional Tests
      - name: Restore dependencies for Functional Tests
        run: dotnet restore GatewayRequestApi.FunctionalTests/GatewayRequestApi.FunctionalTests.csproj

      # Step 7: Run Functional Tests
      - name: Run Functional Tests
        run: dotnet test GatewayRequestApi.FunctionalTests/GatewayRequestApi.FunctionalTests.csproj --verbosity normal

      # Step 6: Install xUnit Viewer
      - name: Install xUnit Viewer
        run: npm install -g xunit-viewer

      # Step 7: Generate Test Report for Unit Tests
      - name: Generate Unit Test Report
        run: xunit-viewer -r unit-test-results.trx -o unit-test-report.html

      # Step 8: Generate Test Report for Functional Tests
      - name: Generate Functional Test Report
        run: xunit-viewer -r functional-test-results.trx -o functional-test-report.html

      # Step 9: Upload Reports as Artifacts
      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            unit-test-report.html
            functional-test-report.html

      # Step 10: Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # Step 11: Build the Docker image
      - name: Build Docker image
        run: |
          docker build --build-arg AZURE_DEVOPS_PAT=${{ secrets.AZURE_DEVOPS_PAT }} -t ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-request-api:dev -f GatewayRequestApi/Dockerfile .

      # Step 12: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gateway-request-api:dev

      # Step 13: Trigger Azure Release Pipeline
      - name: Trigger Azure DevOps Pipeline
        uses: Azure/pipelines@v1.2
        with:
          azure-devops-project-url: ${{ secrets.AZURE_DEVOPS_PROJECT_URL }}
          azure-pipeline-name: 'thattonBL.GatewayRequestApi'
          azure-devops-token: ${{ secrets.AZURE_DEVOPS_PAT }}
      
      - uses: actions/checkout@v2
